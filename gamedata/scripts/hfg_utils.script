dbg_lvl = "dev"

function split(str, sep)
    local tbl = {}
    if not sep then
        sep = "%s"
    end
    for ele in string.gmatch(str, "([^" .. sep .. "]+)") do
        tbl[#tbl + 1] = ele
    end
    return tbl
end


function reverse_ipairs(tbl)
    local tmp = {}
    for i=#tbl, 1 , -1 do
        tmp[#tmp + 1] = tbl[i]
    end
    return tmp
end

--- Authored by NLTP_ASHES 17/02/24 Anomaly Discord
function get_unknown_object(obj, result_obj_type)
    if result_obj_type == "server" then
        if obj and type(obj.id) == "number" then
            return obj
        elseif obj and type(obj.id) == "function" then
            return alife_object(obj:id())
        end
    elseif result_obj_type == "game" then
        if obj and type(obj.id) == "number" then
            return level.object_by_id(obj.id)
        elseif obj and type(obj.id) == "function" then
            return obj
        end
    end
    return nil
end



---@Author NLTP ASHES
function get_translation(str, ...)
    if not has_translation(str) then return end

    local string = game.translate_string(str)

    if (select('#',...) >= 1) then
        local i = 0
        local p = {...}
        local function sr()
            i = i + 1
            if (type(p[i]) == "userdata") then
                return "userdata"
            end
            return tostring(p[i])
        end
        string = string.gsub(string,"%%s",sr)
    end

    return string
end

function has_translation(str)
    return game.translate_string(str) ~= str
end

--- Check if table contains a key
---@param tbl table
---@param key any
---@param by_key boolean
---@param return_value boolean
function contains(tbl, key, by_key, return_value, return_idx)
	if is_empty(tbl) or key == "" then return false end
    for k, v in pairs(tbl) do
        if by_key and k == key then
			if return_idx then
				return true, k
			elseif return_value then
				return true, v
			else
				return true
			end
        else
            if v == key then
                if return_value and return_idx then
                    return true, v, k
				elseif return_value then
					return true, v
				elseif return_idx then
					return true, k
                else
                    return true
                end
            end
        end
    end
    return false
end

--- Get a list of sections from objects
---@param objs table{game_objects}
function get_sect_tbl(tbl)
    local sect_tbl = {}
    for _, obj in ipairs(tbl) do
        sect_tbl[#sect_tbl + 1] = obj:section()
    end
    --printf("sect list %s", table.concat(sect_list, ","))
    return sect_tbl
end

function find_obj(sect, pos, radius, search)
    local objs = {}
    local function itr(obj)
        local found_sect = obj:section()
        if not search then
            if is_not_empty({string.find(found_sect, sect)}) then
                objs[#objs + 1] = obj
            end
        else
            if search(obj) then
                objs[#objs + 1] = obj
            end
        end       
    end
    level.iterate_nearest(pos, radius, itr)
    return objs
end

function get_nearest(tbl, pos)
    local closest_idx
    local closest_dist
    pos = pos or db.actor:position()
    for idx, obj in pairs(tbl) do
        local dist = pos:distance_to(obj:position())
        if not closest_dist or dist < closest_dist then
            closest_dist = dist
            closest_idx = idx
        end
    end
    return tbl[closest_idx]
end

-- DEBUG print

function print_table(tbl)
    if is_empty(tbl) then return "{}" end
    return utils_data.print_table(tbl, nil, true)
end


function dbg_pr(header, str, ...)
    --if get_config("enable_debug") then
    printf(header, strformat(str, ...))
    --end
end

function pr(str, ...)
	if not filter_debug_msg(dbg_lvl) then return end
    dbg_pr("[HFG|Utils]: %s", str, ...)
end


function mcm_debug_level()
	return DEV_DEBUG and "all" or "player" --  get_config("debug_level") or
end

function filter_debug_msg(debug_level)
	local mcm_dbg_lvl = mcm_debug_level()
	local accepted_debug_msgs = {
		["player"] = {"player"},
		["dev"] = {"player", "dev"},
		["all"] = {"player", "dev", "all"}
	}
	return contains(accepted_debug_msgs[mcm_dbg_lvl], debug_level)
end

function set_debug_level(new_dbg_level)
	dbg_lvl = new_dbg_level
end
