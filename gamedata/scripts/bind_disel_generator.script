get_unknown_object = hfg_utils.get_unknown_object
contains = hfg_utils.contains
gts = hfg_utils.get_translation
set_debug_level = hfg_utils.set_debug_level
get_sect_tbl = hfg_utils.get_sect_tbl
find_obj = hfg_utils.find_obj
get_nearest = hfg_utils.get_nearest
print_table = hfg_utils.print_table

-- Constants

SEARCH_RADIUS = 50
FUEL_SECTIONS = {"batteries_dead"}

placed_generators = {}

swap_power_state = {
    on = "off",
    off = "on",
    broken = "broken"
}

-- DEBUGGING
function pr(str, ...)
    hfg_utils.dbg_pr("[HFG|Bind Disel Gen]: %s", str, ...)
end

function toggle_power(obj_id)
    pr("Toggle Genny Power")
    local data = hf_obj_manager.get_data(obj_id)
    --pr("Genny data: %s\n", utils_data.print_table(data, nil, true))
    local in_progress = data["anim_in_progress"]
    if in_progress then pr("anim in progress, cant switch power state") return end

    local power_state = data["power_state"]
    if power_state then
        if power_state == "broken" then 
            actor_menu.set_msg(1, gts("st_generator_broken"), 3)
            return 
        end
        local obj = get_unknown_object({id=obj_id}, "game")
        if obj then
            pr("Switching interact tip to %s", power_state)
            obj:set_tip_text(gts("st_power_state_" .. power_state))
        end
        pr("Attempting to switch power from %s to %s", power_state, swap_power_state[power_state])
        hf_obj_manager.update_data(obj_id, {power_state=swap_power_state[power_state], last_power_state=power_state, anim_due=true})
        return
    end
    pr("genny left in current state")
end

function init(obj)
    pr("Initalising genny")
    obj:bind_object(placeable_disel_generator_wrapper(obj).binder)
end

class "placeable_disel_generator_wrapper" (bind_hf_base.hf_binder_wrapper)
function placeable_disel_generator_wrapper:__init(obj) super(obj)
    pr("bind obj id: %s, game obj id: %s", self.object:id(), obj:id())
    local data = contains(placed_generators, self.object:id(), true) and placed_generators[self.object:id()] or hf_obj_manager.get_data(self.object:id())
    
    -- Object Fields
    self.section = self.object:section()
    self.condition = contains(data, "condition", true) and data["condition"] or 1
    
    -- Object State
    self.power_state = data["power_state"] or "off"
    self.object:set_tip_text(gts("st_power_state_" .. swap_power_state[self.power_state]))
    self.current_motion = "idle"

    -- Animation State
    self.anim_due = data["anim_due"] or false
    self.anim_in_progress = data["anim_in_progress"] or false
    self.anim_stage = data["anim_stage"] or 1
    self.anim_state = data["anim_state"] or ""
    self.anim_power_state = data["anim_power_state"] or ""

    -- Animation snd
    self.snd = data["snd"] or {}
    self.snd["last_played"] = contains(data["snd"], "last_played", true) and data["snd"]["last_played"] or nil

    -- Animation Time
    self.anim_tmr = data["anim_tmr"] or 0

    -- Animation tbl
    self.anim_tbl = data["anim_tbl"] or {
        on = {
            [1] = {anim="work_0.5", duration=2, snd="device\\bridge\\motor_start",              },
            [2] = {anim="work",     duration=6, snd="ambient\\pripyat\\pri_b306_generator_start"},
            [3] = {anim="work_2x",  duration=0, snd="ambient\\pripyat\\pri_b306_generator_work"}
        },
        off = {
            [1] = {anim="work",     duration=6, snd="ambient\\pripyat\\pri_b306_generator_work"},
            [2] = {anim="work_0.5", duration=2, snd="device\\bridge\\motor_start"},
            [3] = {anim="idle",     duration=0, snd="device\\bridge\\motor_stop"}
        },
        broken = {
            [1] = {anim="work_2x",  duration=5, snd="weapons\\explo\\dynamite_boom"},
            [2] = {anim="work_0.5", duration=2, snd="device\\bridge\\motor_start"},
            [3] = {anim="idle",     duration=0, snd="device\\bridge\\motor_stop"}
        }
    }

    -- Particles

    self.last_cond_state = data["last_cond_state"] or ""
    self.curr_fx = data["curr_fx"] or {}
    self.fx_tbl = { -- rpt = repeat, slp = sleep
        broken = {
            [1] = {part="explosions\\expl_car_smoke_big",                duration={active=13, pause=2},                  bone_name="exhaust", count=0, loop=true,  active=false, tmr=0},
            [2] = {part="explosions\\explosion_dynamite",                duration={active=1.2, pause=3.8, rpt=1},        bone_name="body",    count=0, loop=false, active=false, tmr=0},
        },
        low = {
            [1] = {part="explosions\\expl_car_smoke_small",              duration={active=13, pause=2},                  bone_name="r_rotor", count=0, loop=true,  active=false, tmr=0},
            [2] = {part="explosions\\campfire_hot_no_fire",              duration={active=1, pause=0.5, rpt=5, slp=60},  bone_name="r_rotor", count=0, loop=true,  active=false, tmr=0},
            [3] = {part="vehiclefx\\niva_damagedexhaust_01",             duration={active=15},                           bone_name="exhaust", count=0, loop=true,  active=false, tmr=0},
        },
        med = {
            [1] = {part="vehiclefx\\generic_exhaust_01",                 duration={active=15},                           bone_name="exhaust", count=0, loop=true,  active=false, tmr=0},
            [2] = {part="vehiclefx\\exhaust_kamaz",                      duration={active=15},                           bone_name="exhaust", count=0, loop=true,  active=false, tmr=0},
        },
        high = {
            [1] = {part="vehiclefx\\exhaust_1",                          duration={active=15},                           bone_name="exhaust", count=0, loop=true,  active=false, tmr=0},
            [2] = {part="vehiclefx\\niva_damagedexhaust_01",             duration={active=1, pause=0.5, rpt=5},          bone_name="exhaust", count=0, loop=false, active=false, tmr=0},
            [3] = {part="industrial_particles\\exhaust_workshop_1",      duration={active=15},                           bone_name="exhaust", count=0, loop=true,  active=false, tmr=0},
        }
    }

    -- Powerable Devices
    self.power_off_devices = true
    self.powerable_devices = self:GetPowerableDevices()


    self:save_data()
end

function placeable_disel_generator_wrapper:update(delta)
    bind_hf_base.hf_binder_wrapper.update(self, delta)
    local tg = time_global()
    self:load_data()

    local condition = self.condition
    local cond_state = cond_to_state(round_idp(condition * 100, 2))    

    if self.last_power_state ~= self.power_state then
        self.object:set_tip_text(gts("st_power_state_" .. swap_power_state[self.power_state]))
    end

    if self.power_state == "on" then
        -- If Condition Has Changed enough for a particle update
        if cond_state ~= self.last_cond_state then
            pr("cond state: %s", cond_state)
            -- If there are particles currently playing, stop them, update curr fx
            if is_not_empty(self.curr_fx) and contains(self.curr_fx, self.last_cond_state) then
                local fx = self.curr_fx[self.last_cond_state]
                for idx, details in pairs(fx) do
                    if details["active"] and contains(details, "id", true) then
                        thial_particles.remove(details["id"])
                    end
                end
            end
            
            self.curr_fx[cond_state] = self.fx_tbl[cond_state]
            self.last_cond_state = cond_state
        end

        for idx, details in pairs(self.curr_fx[self.last_cond_state]) do
            if tg > details["tmr"] then
                if not details["active"] then                    
                    self.curr_fx[self.last_cond_state][idx].tmr = tg + (details["duration"]["active"] * 1000)
                    self.curr_fx[self.last_cond_state][idx].active = true
                    --pr("exhaust pos: %s", vec_to_str(self.exhaust_pos))
                    self.curr_fx[self.last_cond_state][idx].id = thial_particles.add(details["part"], calc_part_pos(self.object, details["bone_name"]), (details["duration"]["active"]*1000))
                    pr("Playing particle: %s for %s", details["part"], details["duration"]["active"])
                elseif details["active"] then
                    local remove_particle = false

                    if details["duration"]["pause"] then
                        self.curr_fx[self.last_cond_state][idx].tmr = tg + (details["duration"]["pause"] * 1000)
                        self.curr_fx[self.last_cond_state][idx].active = false
                        pr("pausing %s for %s", details["part"], details["duration"]["pause"])
                        if details["duration"]["rpt"] then
                            self.curr_fx[self.last_cond_state][idx].count = self.curr_fx[self.last_cond_state][idx]["count"] + 1
                            pr("advancing repeat: %s", self.curr_fx[self.last_cond_state][idx].count)
                            if self.curr_fx[self.last_cond_state][idx]["count"] >= details["duration"]["rpt"] then
                                if not details["loop"] then
                                    pr("particle finished cycle")
                                    self.curr_fx[self.last_cond_state][idx].tmr = 0
                                    self.curr_fx[self.last_cond_state][idx].count = 0
                                    --self.curr_fx[self.last_cond_state][idx].active = false
                                    id = self.curr_fx[self.last_cond_state][idx]["id"]
                                    self.curr_fx[self.last_cond_state][idx] = nil
                                    remove_particle = true
                                    if self.last_cond_state == "broken" then
                                        self.anim_due = true
                                        self.power_state = self.last_cond_state
                                    end
                                elseif details["loop"] and details["duration"]["slp"] then
                                    pr("particle %s reached end of loop putting to sleep for %s", details["part"], details["duration"]["slp"])
                                    self.curr_fx[self.last_cond_state][idx].tmr = tg + details["duration"]["slp"]
                                end
                            end
                        end                    
                    else
                        pr("reseting particle")
                        self.curr_fx[self.last_cond_state][idx].tmr = 0
                        self.curr_fx[self.last_cond_state][idx].active = false
                    end

                    if remove_particle then
                        pr("removing particle")
                        thial_particles.remove(id)
                    end
                
                end
            end
            self:save_data()
        end

    elseif self.power_state == "off" then        
        if is_not_empty(self.curr_fx) and contains(self.curr_fx, self.last_cond_state) then
            pr("power off removing particles")
            local fx = self.curr_fx[self.last_cond_state]
            for idx, details in pairs(fx) do
                if details["active"] and contains(details, "id", true) then
                    thial_particles.remove(details["id"])
                end
            end
            self:save_data()
        end

    elseif self.power_state == "broken" then
        --[[if self.current_motion ~= "idle" then
            self.object:play_cycle("idle")
            self.current_motion = "idle"
            self:save_data()
        end]]
    end


    if self.anim_due then
        if not self.anim_in_progress then
            pr("Setting Anim Control Vars")
            self.anim_in_progress = true
            self.anim_power_state = self.power_state
            self.anim_start_time = tg
            pr("anim power state: %s", self.anim_power_state)
        end

        -- Prevent Toggle Power being constantly pressed from interrupting an animation
        if self.anim_in_progress and self.anim_power_state ~= self.power_state then
            pr("Attempted to change power state during anim, using anim set power state")
            self.power_state = self.anim_power_state
            --pr("power state: %s", self.power_state)
        end

        -- End Process if Animation Time not reached
        if tg < self.anim_tmr then
            return
        end
        pr("Anim Time Reached")
        -- If Anim Gets stuck and/or has exceed it's animation time whilst a cond changes reset it/ move to next stage
        if tg > self.anim_tmr and tg - self.anim_start_time > self.anim_tmr then
            pr("Anim Runtime Exceed, Advancing Stage")
            self.anim_tmr = 0
            self.anim_stage = self.anim_stage + 1
        end

        -- Stop Animation and Reset Controllers
        --pr("Anim stage %s, power state %s", self.anim_stage, self.power_state)
        if self.anim_stage > #self.anim_tbl[self.power_state] then
            pr("stopping anim")
            self.anim_due = false
            self.anim_in_progress = false
            self.anim_tmr = 0
            self.anim_stage = 1
            self.power_off_devices = contains({"off", "broken"}, self.power_state)
            self:save_data()
            return
        end

        pr("Starting Anim Stage %s at %s", self.anim_stage, tg)
        -- Play Animation for given duration and advance/save animation
        local details = self.anim_tbl[self.power_state][self.anim_stage]        
        local snd_props = sound_object.s3d + sound_object.looped
        local last_stage = #self.anim_tbl[self.power_state]
        if self.anim_stage < last_stage or self.anim_stage == last_stage and contains({"off", "broken"}, self.power_state) then
            --pr("Not looping snd")
            snd_props = sound_object.s3d
        end

        if self.snd["last_played"] ~= nil and self.snd["last_played"]:playing() then
            self.snd["last_played"]:stop()
            pr("Stopping last played snd. Played for %s", tg - self.anim_tmr)
        end
        if details["snd"] then
            self.snd["last_played"] = sound_object(details["snd"])
            self.snd["last_played"].volume = 0.7
            self.snd["last_played"]:play_at_pos(self.object, self.object:position(), 0, snd_props)
            pr("playing sound %s", details["snd"])
        end
        pr("Starting to play %s at %s", details["anim"], tg)

        self.object:play_cycle(details["anim"])
        self:UpdateAnimData(details["anim"])
        self.current_motion = details["anim"]
        self.anim_tmr = tg + (details["duration"] * 1000)
        self.anim_stage = self.anim_stage + 1
        self:save_data()
    end

    if self.power_off_devices then
        pr("turning off devices")
        for id, sect in pairs(self.powerable_devices) do
            hf_obj_manager.update_data(id, {is_on=false})
        end
        self.power_off_devices = false
        self:save_data()
    end
end

function placeable_disel_generator_wrapper:UpdateAnimData(anim_name)
    pr("Updating anim data for id:%s", self.object:id())
    local se_obj = alife_object(self.object:id())
    if se_obj then
        local data = utils_stpk.get_physic_data(se_obj)
        pr("From %s to %s", data["skeleton_name"], anim_name)
        data.skeleton_name = anim_name
        utils_stpk.set_physic_data(data, se_obj)
    end
end

function placeable_disel_generator_wrapper:GetPowerableDevices()
    return get_powerable_devices(self.object:position())
end

function placeable_disel_generator_wrapper:net_destroy()
    self:save_data()
    pr("on net destory")
    if self.snd and contains(self.snd, "last_played", true) and self.snd["last_played"]:playing() then
        self.snd["last_played"]:stop()
    end

    if self.curr_fx and is_not_empty(self.curr_fx) then
        if is_not_empty(self.curr_fx) and contains(self.curr_fx, self.last_cond_state) then
            local fx = self.curr_fx[self.last_cond_state]
            for idx, details in pairs(fx) do
                if details["active"] and contains(details, "id", true) then
                    thial_particles.remove(details["id"])
                end
            end
        end 
    end
    if self.power_state == "broken" then
        placed_generators[self.object:id()] = nil
    end
end

function placeable_disel_generator_wrapper:death_callback(victim, who)
    pr("on death")
    if self.snd and contains(self.snd, "last_played", true) and self.snd["last_played"]:playing() then
        self.snd["last_played"]:stop()
    end

    if self.curr_fx and is_not_empty(self.curr_fx) then
        if is_not_empty(self.curr_fx) and contains(self.curr_fx, self.last_cond_state) then
            local fx = self.curr_fx[self.last_cond_state]
            for idx, details in pairs(fx) do
                if details["active"] and contains(details, "id", true) then
                    thial_particles.remove(details["id"])
                end
            end
        end 
    end

    placed_generators[self.object:id()] = nil
end

function placeable_disel_generator_wrapper:save_data()
    pr("save data")
    hf_obj_manager.update_data(self.object:id(), {
        power_state       = self.power_state,
        anim_due          = self.anim_due,
        anim_in_progress  = self.anim_in_progress,
        anim_stage        = self.anim_stage,
        anim_state        = self.anim_state,
        anim_tmr          = self.anim_tmr,
        anim_tbl          = self.anim_tbl,
        anim_power_state  = self.anim_power_state,
        snd               = self.snd,
        last_cond_state   = self.last_cond_state,
        curr_fx           = self.curr_fx,
        fx_tbl            = self.fx_tbl,
        condition         = self.condition,
        powerable_devices = self.powerable_devices,
        power_off_devices = self.power_off_devices,
        current_motion    = self.current_motion,
        anim_start_time   = self.anim_start_time,
        last_power_state   = self.last_power_state
    })
    placed_generators[self.object:id()] = hf_obj_manager.get_data(self.object:id())
    --pr("Genny data: %s\n", print_table(data))
end

function placeable_disel_generator_wrapper:load_data()
    local data = hf_obj_manager.get_data(self.object:id())
    self.power_state       = data["power_state"]
    self.anim_due          = data["anim_due"]
    self.anim_in_progress  = data["anim_in_progress"]
    self.anim_stage        = data["anim_stage"]
    self.anim_state        = data["anim_state"]
    self.anim_tmr          = data["anim_tmr"]
    self.anim_tbl          = data["anim_tbl"]
    self.anim_power_state  = data["anim_power_state"]
    self.snd               = data["snd"]
    self.last_cond_state   = data["last_cond_state"]
    self.curr_fx           = data["curr_fx"]
    self.fx_tbl            = data["fx_tbl"]
    self.condition         = data["condition"]
    self.powerable_devices = data["powerable_devices"]
    self.power_off_devices = data["power_off_devices"]
    self.current_motion    = data["current_motion"]
    self.anim_start_time   = data["anim_start_time"]
    self.last_power_state  = data["last_power_state"]
    --pr("Genny data: %s\n", utils_data.print_table(data, nil, true))
end

function calc_part_pos(obj, bone_name)    
    local bid = obj:get_bone_id(bone_name)
    local bpos = obj:bone_position(bid)
    --pr("%s pos: %s", bone_name, vec_to_str(bpos))
    return bpos
end

function is_powerable_device(sect)
    local fuel_sect = ini_sys:r_string_ex(sect, "fuel_section")
    return contains(FUEL_SECTIONS, fuel_sect)
end

function get_powerable_devices(pos)
    pr("Getting powerable devices")
    local powerable_devices = {}
    local function search(obj)
        local sect = obj:section()
        if is_powerable_device(sect) then
            powerable_devices[obj:id()] = sect
        end
    end
    level.iterate_nearest(pos, SEARCH_RADIUS, search)
    --pr("Found powerable devices: %s", print_table(powerable_devices))
    return powerable_devices
end

function cond_to_state(cond)
    local state = "high"
    if cond <= 10 then
        state = "broken"
    elseif cond <= 25 then
        state = "low"
    elseif cond <= 50 then
        state = "med"
    elseif cond <= 100 then
        state = "high"
    end
    return state
end

-- Monkey Patches
base_toggle_light = ui_furniture_light.toggle_light
function ui_furniture_light.toggle_light(obj_id)
    pr("on toggle light")
    local se_obj = alife_object(obj_id)
    local found_gens = find_obj("placeable_disel_generator", se_obj.position, SEARCH_RADIUS)
    if is_not_empty(found_gens) then
        --pr("found genny: %s", print_table(found_gens))

        local found_gen = get_nearest(found_gens)
        local data = hf_obj_manager.get_data(found_gen:id())
        local powerable_devices = data["powerable_devices"]
        
        if is_not_empty(powerable_devices) then
            local power_state = data["power_state"]
            pr("power state: %s", power_state)
            if contains({"broken", "off"}, power_state) then
                local is_on = hf_obj_manager.get_data(obj_id)["is_on"]
                if is_on then
                    base_toggle_light(obj_id)
                    return
                end
                local item_sect = ini_sys:r_string_ex(se_obj:section_name(), "item_section")
                local light_name = gts(ini_sys:r_string_ex(item_sect, "inv_name"))
                actor_menu.set_msg(1, gts("st_requires_power", power_state, light_name), 3)
                return
            end
        end
    end
    pr("base toggle light")
    base_toggle_light(obj_id)
end

function set_condition_on_hit(obj)
    pr("explosive_item_on_explode: %s", obj:section())
    local found_objs = {}
    local function search(obj)
        local sect = obj:section()
        if is_not_empty({string.find(sect, "disel_generator")}) then
            pr("found genny: %s", obj:section())
            found_objs[#found_objs + 1] = obj
        end
    end

    local radius = ini_sys:r_float_ex(obj:section(), "frags_r")
    level.iterate_nearest(obj:position(), radius, search)

    if is_empty(found_objs) then return end
    for i=1, #found_objs do
        local gen = table.remove(found_objs, i)
        if gen then
            local data = hf_obj_manager.get_data(gen:id())
            local anim_due = false
            local cond = data["condition"] or 1
            cond = cond - 0.25
            -- shoot a ray from obj to genny
            -- if hit any material get material
            -- check to see how much the material would absorb the damage
            -- apply to cond
            pr("just updating cond: %s", cond)
            hf_obj_manager.update_data(gen:id(), {condition=cond})        
        end
    end
   
end

function on_save(mdata)
    mdata.placed_generators = placed_generators or {}
end

function on_load(mdata)
    placed_generators = mdata["placed_generators"] or {}
end

function on_game_start()
    RegisterScriptCallback("explosive_item_on_explode", set_condition_on_hit)
    RegisterScriptCallback("save_state", on_save)
    RegisterScriptCallback("load_state", on_load)
end